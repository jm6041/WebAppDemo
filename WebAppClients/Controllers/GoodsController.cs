//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Net.Http;

namespace Learn.Clients
{
#pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IGoodsController
    {
        System.Threading.Tasks.Task<SwaggerResponse<PagedResultOfGoodsDto>> GetGoodsAsync(GoodsQueryDto queryDto, System.Threading.CancellationToken cancellationToken);

        System.Threading.Tasks.Task<SwaggerResponse<GoodsDto>> GetGoodsByIdAsync(System.Guid? id = null, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GoodsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGoodsController _implementation;

        public GoodsController(IGoodsController implementation)
        {
            _implementation = implementation;
        }

        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Goods/GetGoods")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> GetGoods([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] GoodsQueryDto queryDto, System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.GetGoodsAsync(queryDto, cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status, result.Result);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/Goods/GetGoodsById")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> GetGoodsById(System.Guid? id = null, System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.GetGoodsByIdAsync(id, cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status, result.Result);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IValuesController
    {
        System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<string>>> GetAllAsync(System.Threading.CancellationToken cancellationToken);

        System.Threading.Tasks.Task<SwaggerResponse> PostAsync(string value, System.Threading.CancellationToken cancellationToken);

        System.Threading.Tasks.Task<SwaggerResponse<string>> GetAsync(int id, System.Threading.CancellationToken cancellationToken);

        System.Threading.Tasks.Task<SwaggerResponse> PutAsync(int id, string value, System.Threading.CancellationToken cancellationToken);

        System.Threading.Tasks.Task<SwaggerResponse> DeleteAsync(int id, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ValuesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IValuesController _implementation;

        public ValuesController(IValuesController implementation)
        {
            _implementation = implementation;
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/Values")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> GetAll(System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.GetAllAsync(cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status, result.Result);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Values")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> Post([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string value, System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.PostAsync(value, cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/Values/{id}")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> Get([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id, System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.GetAsync(id, cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status, result.Result);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("api/Values/{id}")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> Put([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id, [Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string value, System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.PutAsync(id, value, cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("api/Values/{id}")]
        public async System.Threading.Tasks.Task<HttpResponseMessage> Delete([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id, System.Threading.CancellationToken cancellationToken)
        {
            var result = await _implementation.DeleteAsync(id, cancellationToken).ConfigureAwait(false);

            var status = (System.Net.HttpStatusCode)result.StatusCode;
            HttpResponseMessage response = Request.CreateResponse(status);

            foreach (var header in result.Headers)
                response.Headers.Add(header.Key, header.Value);

            return response;
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedResultOfGoodsDto
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GoodsDto> Result { get; set; }

        [Newtonsoft.Json.JsonProperty("toltalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ToltalCount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PagedResultOfGoodsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedResultOfGoodsDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GoodsDto : GoodsInDto
    {
        [Newtonsoft.Json.JsonProperty("hasDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasDiscount { get; set; }

        [Newtonsoft.Json.JsonProperty("startTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("endTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EndTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("createTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CreateTimestamp { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GoodsDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GoodsDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GoodsInDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Always)]
        public PricingWay Pricing { get; set; }

        [Newtonsoft.Json.JsonProperty("words", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Words { get; set; }

        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 5000.0D)]
        public double? Days { get; set; }

        [Newtonsoft.Json.JsonProperty("initPrice", Required = Newtonsoft.Json.Required.Always)]
        public double InitPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CurrencySymbol { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset EndTime { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GoodsInDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GoodsInDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PricingWay
    {
        None = 0,

        Words = 10,

        Time = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GoodsQueryDto : PageParameter
    {
        [Newtonsoft.Json.JsonProperty("priceMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PriceMin { get; set; }

        [Newtonsoft.Json.JsonProperty("priceMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PriceMax { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GoodsQueryDto FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GoodsQueryDto>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PageParameter
    {
        [Newtonsoft.Json.JsonProperty("pageIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

        [Newtonsoft.Json.JsonProperty("orderings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Ordering> Orderings { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PageParameter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageParameter>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Ordering
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderingDirection Direction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Ordering FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Ordering>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderingDirection
    {
        Asc = 0,

        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

#pragma warning restore
}